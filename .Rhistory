if(i==1){
means<- rbind(x)
stderror <- rbind(y)
}
else {
means<-rbind(means,x)
stderror<-rbind(stderror,y)
}
}
# Remove the OTU that never had an abundace over 0.01
k<-1
bad <- c()
for(i in 2:ncol(means)){
test<-which(means[,i]>lim)
if(length(test)==0){
bad[k]=i
k=k+1
}
}
#Use Data.table to remove 'bad' columns there may be a better way to do this so that we can just used data frames
#or maybe just data tables to be consistant
means <-data.table(means)
stderror<-data.table(stderror)
badnames = quote(names(means)[bad])
means<-set(means,j=eval(badnames),value=NULL)
badnames = quote(names(stderror)[bad])   # since means is changed above and the identity of badnames is quoted so it also changes
stderror <-set(stderror, j=eval(badnames), value=NULL)
no_days_means <- means[,Day:=NULL]
no_days_ste <- stderror[,Day:=NULL]
#And now that everything is removed we can jump back in to the world of data frames since it is easier to handel plotting by
#just using the row numbers
no_days_means<-data.frame(no_days_means)
no_days_ste<-data.frame(no_days_ste)
#Plotting###
plot(1, type='n', xlim=c(0,days[day]), ylim=c(0,0.5), ylab="Relative Abundance", xlab="Day", xaxt="n", main = paste("Relative abundance in cage:",cage,sep=" "))
for(i in 1:ncol(no_days_means)){
points(days,no_days_means[,i],pch=i,col=i,type='l')
plotCI(days,no_days_means[,i], uiw=no_days_ste[,i], add=T, col=i)
}
}
relabund_plot(26,relabund,0.1)
setwd("~/Desktop/GF_analysis")
source("~/Desktop/GF_analysis/relabund_plots.R")
source("~/Desktop/GF_analysis/relabund_plots.R")
x<- relabund_plot('A',relabund,'count',7)
x[[2]]
View(relabund)
x<-relabund_plot('A',relabund,'count',7)
x<-relabund_plot('A',relabund,'count',7)
library(gplots)
library(plotrix)
#relabund <-read.table('simple.relabund.metadata', header=T,sep='\t',strip.white=TRUE)
#relabund <- relabund[,c(2:4,6:ncol(relabund))]
#Cage - the cage that is used for the plot
# meta is the relabund plot that includes metadata
#lim is the limmit that an otu must reach at least once during the experiment to be included in the plot
relabund_plot<-function(cage,meta,type,lim){
#type='count' Debugging
#cage='A'
#meta=relabund
#lim=2
std <- function(x){sd(x)/sqrt(length(x))}
focus <- meta[meta$Cage==cage,]
days<- sort(unique(focus$Day))
for(i in 1:length(days)){
day = days[i]
focus_day <- focus[focus$Day==day,]
x<-apply(focus_day[,4:ncol(focus_day)],2,mean)
y<-apply(focus_day[,4:ncol(focus_day)],2,std)
if(i==1){
means<- rbind(x)
stderror <- rbind(y)
} else {
means<-rbind(means,x)
stderror<-rbind(stderror,y)
}
}
means<-data.frame(means)  # Yeah the row names are duplicated but it is of no
stderror<-data.frame(stderror) #concern for us. Right?
good <- c()    # to be used in the following if statements
if(type=='percent'){
# Remove the OTU that never had an abundace over lim
k<-1
for(i in 2:ncol(means)){
test<-which(means[,i]>=lim)
if(length(test)!=0){
good[k]=i
k=k+1
}
}
}
if(type=='count'){
totalmeans<-sort(apply(means,2,mean),decreasing=TRUE)
filtered_means<-totalmeans[1:lim]
good<- which(names(means) %in% names(filtered_means))
}
means <-means[,c(good)]
stderror <-stderror[,c(good)]
#why not take the good columns and not the bad ones then I don't need to use data tables
#Use Data.table to remove 'bad' columns there may be a better way to do this so that we can just used data frames
#or maybe just data tables to be consistant
#Plotting###
plot(1, type='n', xlim=c(days[1],days[length(days)]), ylim=c(0,0.8), ylab="Relative Abundance", xlab="Day", main = paste("Relative abundance in cage:",cage,sep=" "))
if(is.null(ncol(means))==TRUE){
size = 1
} else {
size = ncol(means)
}
for(i in 1:size){
points(days,means[,i],pch=i,col=i,type='l')
plotCI(days,means[,i], uiw=stderror[,i], add=T, col=i)
}
#return(means)
#return(stderror)
#return(days)
list(means,stderror,days)
}
x<-relabund_plot('A',relabund,'count',7)
library(gplots)
library(plotrix)
#relabund <-read.table('simple.relabund.metadata', header=T,sep='\t',strip.white=TRUE)
#relabund <- relabund[,c(2:4,6:ncol(relabund))]
#Cage - the cage that is used for the plot
# meta is the relabund plot that includes metadata
#lim is the limmit that an otu must reach at least once during the experiment to be included in the plot
relabund_plot<-function(cage,meta,type,lim){
#type='count' Debugging
#cage='A'
#meta=relabund
#lim=2
std <- function(x){sd(x)/sqrt(length(x))}
focus <- meta[meta$Cage==cage,]
days<- sort(unique(focus$Day))
for(i in 1:length(days)){
day = days[i]
focus_day <- focus[focus$Day==day,]
x<-apply(focus_day[,4:ncol(focus_day)],2,mean)
y<-apply(focus_day[,4:ncol(focus_day)],2,std)
if(i==1){
means<- rbind(x)
stderror <- rbind(y)
} else {
means<-rbind(means,x)
stderror<-rbind(stderror,y)
}
}
means<-data.frame(means)  # Yeah the row names are duplicated but it is of no
stderror<-data.frame(stderror) #concern for us. Right?
good <- c()    # to be used in the following if statements
if(type=='percent'){
# Remove the OTU that never had an abundace over lim
k<-1
for(i in 2:ncol(means)){
test<-which(means[,i]>=lim)
if(length(test)!=0){
good[k]=i
k=k+1
}
}
}
if(type=='count'){
totalmeans<-sort(apply(means,2,mean),decreasing=TRUE)
filtered_means<-totalmeans[1:lim]
good<- which(names(means) %in% names(filtered_means))
}
means <-means[,c(good)]
stderror <-stderror[,c(good)]
#why not take the good columns and not the bad ones then I don't need to use data tables
#Use Data.table to remove 'bad' columns there may be a better way to do this so that we can just used data frames
#or maybe just data tables to be consistant
#Plotting###
plot(1, type='n', xlim=c(days[1],days[length(days)]), ylim=c(0,0.8), ylab="Relative Abundance", xlab="Day", main = paste("Relative abundance in cage:",cage,sep=" "))
if(is.null(ncol(means))==TRUE){
size = 1
} else {
size = ncol(means)
}
for(i in 1:size){
points(days,means[,i],pch=i,col=i,type='l')
plotCI(days,means[,i], uiw=stderror[,i], add=T, col=i)
}
#return(means)
#return(stderror)
#return(days)
list(means,stderror,days)
}
x<-relabund_plot('A',relabund,'count',7)
relabund <-read.table('/Volumes/MCCRONE/603 Project/Data/simple.relabund.metadata', header=T,sep='\t',strip.white=TRUE)
relabund <- relabund[,c(2:4,6:ncol(relabund))]
x<-relabund_plot('A',relabund,'count',7)
x[[3]]
library(gplots)
library(plotrix)
top_otu<-function(Phylolevel,Inoc,lim){
file<- paste('~/Desktop/GF_data/colonus.relabund.tx.',Phylolevel,'.metadata', sep='')
ref_file<-paste('~/Desktop/GF_data/colonus.reference.',Phylolevel,'.taxonomy',sep='')
meta <- read.table(file,header=T,sep='\t',strip.white=TRUE)
taxa<- read.table(ref_file,header=T,sep='\t',strip.white=TRUE)
std <- function(x){sd(x)/sqrt(length(x))}
str2num<-function(x){as.numeric(as.character(x))}
get_name<-function(x){taxa$Taxonomy[taxa$OTU==x]}
#Inocs<-unique(meta$Inoc) # for comparing all the innocula
#Inocs<-c('H1','H2','H3','C1','C2','C3')
#=========Trim metadata to just metadata and relative abundance data==============================================================================
meta$X=NULL  #An extra colum of NA was read in removes this
meta<-meta[,c(2:6,8:ncol(meta))]  #just metadata and OTU
#========Trim everything down to just the inocula of interest=====================================================================================
focus_Inoc<-meta[meta$Inoc %in% Inoc,]
#=========Take the top lim OTU from the Inocs=====================================================================================================
q<-1
good <- c()    # to be used in the following if statements
ave_pop<-sort(apply(meta[,6:ncolmeta],2,mean),decreasing=TRUE)  # average the relabunances of each OTU and sort in decreasing order
passed_cutoff<-ave_pop[1:lim]   # Identify those OTU which pass the cutoff of being in the top lim OTU
good<- which(names(meta) %in% names(passed_cutoff))  # take the good colums and save
focus_Inoc <-focus_Inoc[,c(1:5,good)] # Trim meta down to the metadata and those OTUs that past the limit test
#==================Set up Plotting================================================================================================================
plot(1, type='n', xlim=c(-5,30), ylim=c(0,1), ylab="Relative Abundance", xlab="Day", main = paste("Plot of",Inoc,"at Phylolevel",Phylolevel))
key<-c() # initiate key for legends
llave<-1 # initiate counter for legend
colors<-c('powderblue','purple','red','rosybrown','royalblue','salmon','seagreen','seashell')
#==========Get info for each OTU ================================================================================================================
for(c in 6:ncol(meta)){  # highlight 1 OTU at a time there are 5 columns of meta data
focus_otu<-focus_Inoc[,c(1:5),c]
Cages<-unique(focus_otu$Cage)  # get the cages for this inocula and otu
#==============Take a cage from that Inocula========================
for(j in 1:length(Cages)){ # take each cage separately
focus_cage<-focus_otu[focus_otu$Cage==Cages[j],]
if(unique(focus_cage$Cage)=='INOC'){ # There should only be one cage so unique should be length 1
focus_cage$Day=-5
}
Days<- unique(focus_cage$Day) # Get the days for this cage
Days<- sort(str2num(Days)) # convert to number vector by function above and then sort
mediocrist<-c() # Set up vector to collect mean values across days
error<- c() # Set up vector to collect error values across days
#==============Average over mice/day in cage and add to vector=========================================
for(k in 1:length(Days)){
focus_day<-focus_cage[focus_cage$Day==Days[k],] # Get the mice we have in this cage for this day
mediocrist[k]<-mean(focus_day[,6])  # should take the last column which is one housing the otu data
error[k]<- std(focus_day[,6])
}#Close day
#===============Add Data from cage to Plot=================================================
color<-colors[c] #
points(Days,mediocrist,pch=16,col=color,type='b')
plotCI(Days,mediocrist, uiw=error, add=T, col=color)
key[llave]<-get_name(names(focus_day[6]))  #llave is spanish for key and serves as the counter here
key_colors[llave]<-color
llave<-llave+1
}#close Cage
} #Close OTU
legend(25,1,key,pch=16,col=key_colors) # takes color from distriubution of j which corresponds to cages
} #Close Function
top_otu(5,'H1',5)
library(gplots)
library(plotrix)
top_otu<-function(Phylolevel,Inoc,lim){
file<- paste('~/Desktop/GF_data/colonus.relabund.tx.',Phylolevel,'.metadata', sep='')
ref_file<-paste('~/Desktop/GF_data/colonus.reference.',Phylolevel,'.taxonomy',sep='')
meta <- read.table(file,header=T,sep='\t',strip.white=TRUE)
taxa<- read.table(ref_file,header=T,sep='\t',strip.white=TRUE)
std <- function(x){sd(x)/sqrt(length(x))}
str2num<-function(x){as.numeric(as.character(x))}
get_name<-function(x){taxa$Taxonomy[taxa$OTU==x]}
#Inocs<-unique(meta$Inoc) # for comparing all the innocula
#Inocs<-c('H1','H2','H3','C1','C2','C3')
#=========Trim metadata to just metadata and relative abundance data==============================================================================
meta$X=NULL  #An extra colum of NA was read in removes this
meta<-meta[,c(2:6,8:ncol(meta))]  #just metadata and OTU
#========Trim everything down to just the inocula of interest=====================================================================================
focus_Inoc<-meta[meta$Inoc %in% Inoc,]
#=========Take the top lim OTU from the Inocs=====================================================================================================
q<-1
good <- c()    # to be used in the following if statements
ave_pop<-sort(apply(meta[,6:ncolmeta],2,mean),decreasing=TRUE)  # average the relabunances of each OTU and sort in decreasing order
passed_cutoff<-ave_pop[1:lim]   # Identify those OTU which pass the cutoff of being in the top lim OTU
good<- which(names(meta) %in% names(passed_cutoff))  # take the good colums and save
focus_Inoc <-focus_Inoc[,c(1:5,good)] # Trim meta down to the metadata and those OTUs that past the limit test
#==================Set up Plotting================================================================================================================
plot(1, type='n', xlim=c(-5,30), ylim=c(0,1), ylab="Relative Abundance", xlab="Day", main = paste("Plot of",Inoc,"at Phylolevel",Phylolevel))
key<-c() # initiate key for legends
llave<-1 # initiate counter for legend
colors<-c('powderblue','purple','red','rosybrown','royalblue','salmon','seagreen','seashell')
#==========Get info for each OTU ================================================================================================================
for(c in 6:ncol(meta)){  # highlight 1 OTU at a time there are 5 columns of meta data
focus_otu<-focus_Inoc[,c(1:5),c]
Cages<-unique(focus_otu$Cage)  # get the cages for this inocula and otu
#==============Take a cage from that Inocula========================
for(j in 1:length(Cages)){ # take each cage separately
focus_cage<-focus_otu[focus_otu$Cage==Cages[j],]
if(unique(focus_cage$Cage)=='INOC'){ # There should only be one cage so unique should be length 1
focus_cage$Day=-5
}
Days<- unique(focus_cage$Day) # Get the days for this cage
Days<- sort(str2num(Days)) # convert to number vector by function above and then sort
mediocrist<-c() # Set up vector to collect mean values across days
error<- c() # Set up vector to collect error values across days
#==============Average over mice/day in cage and add to vector=========================================
for(k in 1:length(Days)){
focus_day<-focus_cage[focus_cage$Day==Days[k],] # Get the mice we have in this cage for this day
mediocrist[k]<-mean(focus_day[,6])  # should take the last column which is one housing the otu data
error[k]<- std(focus_day[,6])
}#Close day
#===============Add Data from cage to Plot=================================================
color<-colors[c] #
points(Days,mediocrist,pch=16,col=color,type='b')
plotCI(Days,mediocrist, uiw=error, add=T, col=color)
key[llave]<-get_name(names(focus_day[6]))  #llave is spanish for key and serves as the counter here
key_colors[llave]<-color
llave<-llave+1
}#close Cage
} #Close OTU
legend(25,1,key,pch=16,col=key_colors) # takes color from distriubution of j which corresponds to cages
} #Close Function
top_otu(5,'H1',5)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H1',5)
top_otu(5,'H1',5)
focus_day
clear
file<- paste('~/Desktop/GF_data/colonus.relabund.tx.',Phylolevel,'.metadata', sep='')
ref_file<-paste('~/Desktop/GF_data/colonus.reference.',Phylolevel,'.taxonomy',sep='')
meta <- read.table(file,header=T,sep='\t',strip.white=TRUE)
taxa<- read.table(ref_file,header=T,sep='\t',strip.white=TRUE)
std <- function(x){sd(x)/sqrt(length(x))}
str2num<-function(x){as.numeric(as.character(x))}
get_name<-function(x){taxa$Taxonomy[taxa$OTU==x]}
#Inocs<-unique(meta$Inoc) # for comparing all the innocula
Inocs<-c('H1')
#=========Trim metadata to just metadata and relative abundance data==============================================================================
meta$X=NULL  #An extra colum of NA was read in removes this
meta<-meta[,c(2:6,8:ncol(meta))]  #just metadata and OTU
#========Trim everything down to just the inocula of interest=====================================================================================
focus_Inoc<-meta[meta$Inoc %in% Inoc,]
file<- paste('~/Desktop/GF_data/colonus.relabund.tx.',Phylolevel,'.metadata', sep='')
Phylolevel <-5;Inoc<-'H1';lim<-4
file<- paste('~/Desktop/GF_data/colonus.relabund.tx.',Phylolevel,'.metadata', sep='')
ref_file<-paste('~/Desktop/GF_data/colonus.reference.',Phylolevel,'.taxonomy',sep='')
meta <- read.table(file,header=T,sep='\t',strip.white=TRUE)
taxa<- read.table(ref_file,header=T,sep='\t',strip.white=TRUE)
std <- function(x){sd(x)/sqrt(length(x))}
str2num<-function(x){as.numeric(as.character(x))}
get_name<-function(x){taxa$Taxonomy[taxa$OTU==x]}
meta$X=NULL  #An extra colum of NA was read in removes this
meta<-meta[,c(2:6,8:ncol(meta))]  #just metadata and OTU
#========Trim everything down to just the inocula of interest=====================================================================================
focus_Inoc<-meta[meta$Inoc %in% Inoc,]
View(focus_Inoc)
#=========Take the top lim OTU from the Inocs=====================================================================================================
q<-1
good <- c()    # to be used in the following if statements
ave_pop<-sort(apply(meta[,6:ncol(meta)],2,mean),decreasing=TRUE)  # average the relabunances of each OTU and sort in decreasing order
passed_cutoff<-ave_pop[1:lim]   # Identify those OTU which pass the cutoff of being in the top lim OTU
good<- which(names(meta) %in% names(passed_cutoff))  # take the good colums and save
focus_Inoc <-focus_Inoc[,c(1:5,good)] # Trim meta down to the metadata and those OTUs that past the limit test
View(focus_Inoc)
for(c in 6:ncol(focus_Inoc)){  # highlight 1 OTU at a time there are 5 columns of meta data
focus_otu<-focus_Inoc[,c(1:5),c]
Cages<-unique(focus_otu$Cage)  # get the cages for this inocula and otu
#==============Take a cage from that Inocula========================
for(j in 1:length(Cages)){ # take each cage separately
focus_cage<-focus_otu[focus_otu$Cage==Cages[j],]
if(unique(focus_cage$Cage)=='INOC'){ # There should only be one cage so unique should be length 1
focus_cage$Day=-5
}
Days<- unique(focus_cage$Day) # Get the days for this cage
Days<- sort(str2num(Days)) # convert to number vector by function above and then sort
mediocrist<-c() # Set up vector to collect mean values across days
error<- c() # Set up vector to collect error values across days
#==============Average over mice/day in cage and add to vector=========================================
for(k in 1:length(Days)){
focus_day<-focus_cage[focus_cage$Day==Days[k],] # Get the mice we have in this cage for this day
mediocrist[k]<-mean(focus_day[,6])  # should take the last column which is one housing the otu data
error[k]<- std(focus_day[,6])
}#Close day
#===============Add Data from cage to Plot=================================================
color<-colors[c] #
points(Days,mediocrist,pch=16,col=color,type='b')
plotCI(Days,mediocrist, uiw=error, add=T, col=color)
key[llave]<-get_name(names(focus_day[6]))  #llave is spanish for key and serves as the counter here
key_colors[llave]<-color
llave<-llave+1
}#close Cage
} #Close OTU
for(c in 6:6){#ncol(focus_Inoc)){  # highlight 1 OTU at a time there are 5 columns of meta data
}
c=6
focus_otu<-focus_Inoc[,c(1:5),c]
View(focus_otu)
View(focus_otu)
focus_Inoc[,6]
focus_otu<-focus_Inoc[,c(1:5,c)] # +1 because there is a column
View(focus_otu)
source('~/.active-rstudio-document')
top_otu(5,'H1')
top_otu(5,'H1',4)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H1',4)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H1',4)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H1',4)
get_name(names(focus_day[6]))
get_name(names(focus_Inoc[6]))
source('~/.active-rstudio-document')
top_otu(5,'H1',4)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H1',1)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H1',1)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H1',1)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H1',1)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H1',1)
source('~/Desktop/GF_analysis/top_otu.R')
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H1',1)
top_otu(5,'H1',2)
top_otu(5,'H1',3)
top_otu(5,'H3',3)
top_otu(5,'H3',1)
top_otu(5,'H1',5)
set.seed(1) # just to get the same random numbers
par(xpd=FALSE) # this is usually the default
plot(1:3, rnorm(3), pch = 1, lty = 1, type = "o", ylim=c(-2,2), bty='L')
# this legend gets clipped:
legend(2.8,0,c("group A", "group B"), pch = c(1,2), lty = c(1,2))
# so turn off clipping:
par(xpd=TRUE)
legend(2.8,-1,c("group A", "group B"), pch = c(1,2), lty = c(1,2))
par(xpd=TRUE)
> legend(2.8,-1,c("group A", "group B"), pch = c(1,2), lty = c(1,2))
# so turn off clipping:
par(xpd=TRUE)
legend(2.8,-1,c("group A", "group B"), pch = c(1,2), lty = c(1,2))
source('~/Desktop/GF_analysis/top_otu.R')
# so turn off clipping:
par(xpd=TRUE)
legend(2.8,-1,c("group A", "group B"), pch = c(1,2), lty = c(1,2))
top_otu(5,'H3',1)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H3',1)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H3',1)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H3',1)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H3',1)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H3',1)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H3',1)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H3',1)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H3',1)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H3',1)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H3',1)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H3',1)
source('~/Desktop/GF_analysis/top_otu.R')
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H3',1)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H3',1)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H3',1)
top_otu(5,'H3',5)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H3',5)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H3',5)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H3',5)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H3',5)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H3',5)
top_otu(5,'H3',5)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H3',5)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H3',5)
source('~/Desktop/GF_analysis/top_otu.R')
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H3',5)
source('~/Desktop/GF_analysis/top_otu.R')
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H3',5)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'H3',5)
source('~/Desktop/GF_analysis/top_otu.R')
source('~/Desktop/GF_analysis/top_otu.R')
source('~/Desktop/GF_analysis/top_otu.R')
source('~/Desktop/GF_analysis/top_otu.R')
A<-c('H1','Chlos','AASDFAS')
sort(A)
source('~/Desktop/GF_analysis/top_otu.R')
sort(A)
top_otu(5,'H3',5)
top_otu(5,'H1',5)
top_otu(5,'C1',5)
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'C1',5)
source('~/Desktop/GF_analysis/top_otu.R')
source('~/Desktop/GF_analysis/top_otu.R')
top_otu(5,'C1',5)
top_otu(5,'C1',5,'b3')
top_otu(5,'C1',5,c('b3','b4'))
source('~/Desktop/GF_analysis/top_otu.R')
